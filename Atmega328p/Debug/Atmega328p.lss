
Atmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000366  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000366  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bdb  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d9  00000000  00000000  00001023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053e  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000441  00000000  00000000  00001e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000579  00000000  00000000  000022c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000283e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  88:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <setup>:
volatile char receivedChar = 0;    //Variable que almacena el valor del UART
int cambio = 0;

void setup(void);
void setup(void){
	cli();  //Apagar interrupciones
  90:	f8 94       	cli
	
	DDRB = 0b00000000;   //PB0, PB1, PB2, PB3, PB4 como entrada
  92:	14 b8       	out	0x04, r1	; 4
	PORTB = 0b00011111;		//pull up encendido en PB0 y PB1 y PB2
  94:	8f e1       	ldi	r24, 0x1F	; 31
  96:	85 b9       	out	0x05, r24	; 5
	
	 DDRD &= ~(1 << PIND2);   // Configura PD2 como entrada
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	8a b9       	out	0x0a, r24	; 10
	 PORTD |= (1 << PIND2);   // Habilita el pull-up interno en PD2
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	84 60       	ori	r24, 0x04	; 4
  a2:	8b b9       	out	0x0b, r24	; 11
	
	initUART9600();  //Iniciar UART
  a4:	0e 94 55 01 	call	0x2aa	; 0x2aa <initUART9600>
	
	PCMSK0 |= (1 << 0)|(1 << 1)|(1 << 2)|(1 << 3)|(1 << 4); //PCINT0, PCINT1, PCINT2, PCINT3, PCINT4
  a8:	eb e6       	ldi	r30, 0x6B	; 107
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8f 61       	ori	r24, 0x1F	; 31
  b0:	80 83       	st	Z, r24
	PCICR |= (1 << 0); //Mascara de interrupción
  b2:	e8 e6       	ldi	r30, 0x68	; 104
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	80 83       	st	Z, r24
	
	EICRA &= ~((1 << ISC01) | (1 << ISC00));  // Configura INT0 para que se dispare en nivel bajo
  bc:	e9 e6       	ldi	r30, 0x69	; 105
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	8c 7f       	andi	r24, 0xFC	; 252
  c4:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);  // Habilita la interrupción externa INT0
  c6:	8d b3       	in	r24, 0x1d	; 29
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	8d bb       	out	0x1d, r24	; 29

	sei(); //Activar interrupciones
  cc:	78 94       	sei
  ce:	08 95       	ret

000000d0 <main>:
}
int main(void)
{
    setup();
  d0:	0e 94 48 00 	call	0x90	; 0x90 <setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	8f e3       	ldi	r24, 0x3F	; 63
  d6:	9c e9       	ldi	r25, 0x9C	; 156
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x8>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0xe>
  de:	00 00       	nop
  e0:	f9 cf       	rjmp	.-14     	; 0xd4 <main+0x4>

000000e2 <__vector_3>:
		
    }
}


ISR(PCINT0_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	4f 93       	push	r20
  f2:	5f 93       	push	r21
  f4:	6f 93       	push	r22
  f6:	7f 93       	push	r23
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
	
	if(((PINB) & (1<<0)) == 0){   //Condicional que compara si se presionó el pulsador 1
 104:	18 99       	sbic	0x03, 0	; 3
 106:	15 c0       	rjmp	.+42     	; 0x132 <__vector_3+0x50>
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	89 ef       	ldi	r24, 0xF9	; 249
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <__vector_3+0x2c>
 116:	00 c0       	rjmp	.+0      	; 0x118 <__vector_3+0x36>
 118:	00 00       	nop
		_delay_ms(20);  //antirrebote
		
		writeUART('1');
 11a:	81 e3       	ldi	r24, 0x31	; 49
 11c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <writeUART>
		
		
		while ((PINB & (1 << PINB0)) == 0)   //While para evitar sumas indebidas
 120:	06 c0       	rjmp	.+12     	; 0x12e <__vector_3+0x4c>
 122:	8f e3       	ldi	r24, 0x3F	; 63
 124:	9c e9       	ldi	r25, 0x9C	; 156
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <__vector_3+0x44>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <__vector_3+0x4a>
 12c:	00 00       	nop
 12e:	18 9b       	sbis	0x03, 0	; 3
 130:	f8 cf       	rjmp	.-16     	; 0x122 <__vector_3+0x40>
			_delay_ms(10);
		}
		
	}
	
	 if(((PINB) & (1<<1)) == 0){   //Condicional que compara si se presionó el pulsador  2
 132:	19 99       	sbic	0x03, 1	; 3
 134:	15 c0       	rjmp	.+42     	; 0x160 <__vector_3+0x7e>
 136:	9f ef       	ldi	r25, 0xFF	; 255
 138:	29 ef       	ldi	r18, 0xF9	; 249
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 50       	subi	r25, 0x01	; 1
 13e:	20 40       	sbci	r18, 0x00	; 0
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <__vector_3+0x5a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <__vector_3+0x64>
 146:	00 00       	nop
		_delay_ms(20);  //antirrebote
		
		writeUART('2');
 148:	82 e3       	ldi	r24, 0x32	; 50
 14a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <writeUART>
		
		while ((PINB & (1 << PINB1)) == 0)   //While para evitar sumas indebidas
 14e:	06 c0       	rjmp	.+12     	; 0x15c <__vector_3+0x7a>
 150:	8f e3       	ldi	r24, 0x3F	; 63
 152:	9c e9       	ldi	r25, 0x9C	; 156
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <__vector_3+0x72>
 158:	00 c0       	rjmp	.+0      	; 0x15a <__vector_3+0x78>
 15a:	00 00       	nop
 15c:	19 9b       	sbis	0x03, 1	; 3
 15e:	f8 cf       	rjmp	.-16     	; 0x150 <__vector_3+0x6e>
			_delay_ms(10);
		}
		
	}
	
	 if(((PINB) & (1<<2)) == 0){   //Condicional que compara si se presionó el pulsador  3
 160:	1a 99       	sbic	0x03, 2	; 3
 162:	16 c0       	rjmp	.+44     	; 0x190 <__vector_3+0xae>
 164:	9f ef       	ldi	r25, 0xFF	; 255
 166:	29 ef       	ldi	r18, 0xF9	; 249
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	91 50       	subi	r25, 0x01	; 1
 16c:	20 40       	sbci	r18, 0x00	; 0
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <__vector_3+0x88>
 172:	00 c0       	rjmp	.+0      	; 0x174 <__vector_3+0x92>
 174:	00 00       	nop
		_delay_ms(20);  //antirrebote
		
		writeUART('3');
 176:	83 e3       	ldi	r24, 0x33	; 51
 178:	0e 94 70 01 	call	0x2e0	; 0x2e0 <writeUART>
		
		while ((PINB & (1 << PINB2)) == 0)   //While para evitar sumas indebidas
 17c:	06 c0       	rjmp	.+12     	; 0x18a <__vector_3+0xa8>
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	9c e9       	ldi	r25, 0x9C	; 156
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <__vector_3+0xa0>
 186:	00 c0       	rjmp	.+0      	; 0x188 <__vector_3+0xa6>
 188:	00 00       	nop
 18a:	1a 9b       	sbis	0x03, 2	; 3
 18c:	f8 cf       	rjmp	.-16     	; 0x17e <__vector_3+0x9c>
 18e:	2f c0       	rjmp	.+94     	; 0x1ee <__vector_3+0x10c>
			_delay_ms(10);
		}
		
	}

	else if(((PINB) & (1<<3)) == 0){   //Condicional que compara si se presionó el pulsador  4
 190:	1b 99       	sbic	0x03, 3	; 3
 192:	16 c0       	rjmp	.+44     	; 0x1c0 <__vector_3+0xde>
 194:	9f ef       	ldi	r25, 0xFF	; 255
 196:	29 ef       	ldi	r18, 0xF9	; 249
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	91 50       	subi	r25, 0x01	; 1
 19c:	20 40       	sbci	r18, 0x00	; 0
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <__vector_3+0xb8>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <__vector_3+0xc2>
 1a4:	00 00       	nop
		_delay_ms(20);  //antirrebote
		
		writeUART('4');
 1a6:	84 e3       	ldi	r24, 0x34	; 52
 1a8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <writeUART>
		
		while ((PINB & (1 << PINB3)) == 0)   //While para evitar sumas indebidas
 1ac:	06 c0       	rjmp	.+12     	; 0x1ba <__vector_3+0xd8>
 1ae:	8f e3       	ldi	r24, 0x3F	; 63
 1b0:	9c e9       	ldi	r25, 0x9C	; 156
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <__vector_3+0xd0>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <__vector_3+0xd6>
 1b8:	00 00       	nop
 1ba:	1b 9b       	sbis	0x03, 3	; 3
 1bc:	f8 cf       	rjmp	.-16     	; 0x1ae <__vector_3+0xcc>
 1be:	17 c0       	rjmp	.+46     	; 0x1ee <__vector_3+0x10c>
			_delay_ms(10);
		}
		
	}
	
	else if(((PINB) & (1<<4)) == 0){   //Condicional que compara si se presionó el pulsador  5
 1c0:	1c 99       	sbic	0x03, 4	; 3
 1c2:	15 c0       	rjmp	.+42     	; 0x1ee <__vector_3+0x10c>
 1c4:	9f ef       	ldi	r25, 0xFF	; 255
 1c6:	29 ef       	ldi	r18, 0xF9	; 249
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	91 50       	subi	r25, 0x01	; 1
 1cc:	20 40       	sbci	r18, 0x00	; 0
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <__vector_3+0xe8>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <__vector_3+0xf2>
 1d4:	00 00       	nop
		_delay_ms(20);  //antirrebote
		
		writeUART('5');
 1d6:	85 e3       	ldi	r24, 0x35	; 53
 1d8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <writeUART>
		
		while ((PINB & (1 << PINB4)) == 0)   //While para evitar sumas indebidas
 1dc:	06 c0       	rjmp	.+12     	; 0x1ea <__vector_3+0x108>
 1de:	8f e3       	ldi	r24, 0x3F	; 63
 1e0:	9c e9       	ldi	r25, 0x9C	; 156
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <__vector_3+0x100>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <__vector_3+0x106>
 1e8:	00 00       	nop
 1ea:	1c 9b       	sbis	0x03, 4	; 3
 1ec:	f8 cf       	rjmp	.-16     	; 0x1de <__vector_3+0xfc>
		}
		
	}
	
	
}
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	9f 91       	pop	r25
 1f8:	8f 91       	pop	r24
 1fa:	7f 91       	pop	r23
 1fc:	6f 91       	pop	r22
 1fe:	5f 91       	pop	r21
 200:	4f 91       	pop	r20
 202:	3f 91       	pop	r19
 204:	2f 91       	pop	r18
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_1>:


ISR(INT0_vect) {
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	2f 93       	push	r18
 21c:	3f 93       	push	r19
 21e:	4f 93       	push	r20
 220:	5f 93       	push	r21
 222:	6f 93       	push	r22
 224:	7f 93       	push	r23
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	af 93       	push	r26
 22c:	bf 93       	push	r27
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	if(((PIND) & (1<<DDD2)) == 0){     //Condicional que compara si se presionó el pulsador  6
 232:	4a 99       	sbic	0x09, 2	; 9
 234:	15 c0       	rjmp	.+42     	; 0x260 <__vector_1+0x50>
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	89 ef       	ldi	r24, 0xF9	; 249
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <__vector_1+0x2c>
 244:	00 c0       	rjmp	.+0      	; 0x246 <__vector_1+0x36>
 246:	00 00       	nop
		_delay_ms(20);  //antirrebote
		
		writeUART('6');
 248:	86 e3       	ldi	r24, 0x36	; 54
 24a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <writeUART>
		
		while ((PIND & (1 << DDD2)) == 0)   //While para evitar mas pulsos
 24e:	06 c0       	rjmp	.+12     	; 0x25c <__vector_1+0x4c>
 250:	8f e3       	ldi	r24, 0x3F	; 63
 252:	9c e9       	ldi	r25, 0x9C	; 156
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <__vector_1+0x44>
 258:	00 c0       	rjmp	.+0      	; 0x25a <__vector_1+0x4a>
 25a:	00 00       	nop
 25c:	4a 9b       	sbis	0x09, 2	; 9
 25e:	f8 cf       	rjmp	.-16     	; 0x250 <__vector_1+0x40>
		{
			_delay_ms(10);
		}
	}
}
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_18>:


ISR(USART_RX_vect)
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	8f 93       	push	r24
	receivedChar = UDR0; // Almacena el carácter recibido
 28e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 292:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	while(!(UCSR0A & (1<<UDRE0)));    //Mientras haya caracteres
 296:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 29a:	85 ff       	sbrs	r24, 5
 29c:	fc cf       	rjmp	.-8      	; 0x296 <__vector_18+0x14>
	
}
 29e:	8f 91       	pop	r24
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <initUART9600>:
	uint8_t o;
	for(o = 0; Texto[o]!= '\0'; o++){
		while(!(UCSR0A & (1<<UDRE0)));
		UDR0 = Texto[o];
	}
}
 2aa:	8a b1       	in	r24, 0x0a	; 10
 2ac:	8e 7f       	andi	r24, 0xFE	; 254
 2ae:	8a b9       	out	0x0a, r24	; 10
 2b0:	8a b1       	in	r24, 0x0a	; 10
 2b2:	82 60       	ori	r24, 0x02	; 2
 2b4:	8a b9       	out	0x0a, r24	; 10
 2b6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2ba:	e1 ec       	ldi	r30, 0xC1	; 193
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	10 82       	st	Z, r1
 2c0:	80 81       	ld	r24, Z
 2c2:	88 69       	ori	r24, 0x98	; 152
 2c4:	80 83       	st	Z, r24
 2c6:	e2 ec       	ldi	r30, 0xC2	; 194
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	10 82       	st	Z, r1
 2cc:	80 81       	ld	r24, Z
 2ce:	86 60       	ori	r24, 0x06	; 6
 2d0:	80 83       	st	Z, r24
 2d2:	87 e6       	ldi	r24, 0x67	; 103
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2de:	08 95       	ret

000002e0 <writeUART>:


//Funcion de escritura de un caracter
void writeUART(char Caracter)
{
	while(!(UCSR0A & (1<<UDRE0)));  //hasta que la bandera este en 1
 2e0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2e4:	95 ff       	sbrs	r25, 5
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <writeUART>
	UDR0 = Caracter;
 2e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
